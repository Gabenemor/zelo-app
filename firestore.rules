
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Default deny all access unless explicitly allowed
    match /{document=**} {
      allow read, write: if false;
    }
    
    // USER DATA: /users/{userId}
    // This collection stores auth-related info and role.
    match /users/{userId} {
      // Any authenticated user can read basic user info (needed for profiles, etc.)
      allow read: if request.auth != null;

      // Only the user themselves can create their own user document.
      allow create: if request.auth.uid == userId
                    // Ensure they aren't trying to give themselves an admin role.
                    && request.resource.data.role != 'admin'; 

      // Only the user can update their own document, and they cannot change their role. Admins can update any.
      allow update: if (request.auth.uid == userId && request.resource.data.role == resource.data.role)
                    || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';

      // No user can delete their auth record document.
      allow delete: if false;
    }
    
    // CLIENT PROFILES: /clientProfiles/{userId}
    match /clientProfiles/{userId} {
      allow read: if request.auth != null; // Anyone logged in can read a client profile
      // Allow a user to create their own profile document.
      allow create: if request.auth.uid == userId
                    && request.resource.data.userId == userId;
      allow update: if request.auth.uid == userId; // User can only update their own profile
      allow delete: if false; // Disallow deleting profiles
    }

    // ARTISAN PROFILES: /artisanProfiles/{userId}
    match /artisanProfiles/{userId} {
      allow read: if request.auth != null; // Anyone logged in can read an artisan profile
      // Allow a user to create their own profile document.
      allow create: if request.auth.uid == userId
                    && request.resource.data.userId == userId;
      allow update: if request.auth.uid == userId; // User can only update their own profile
      allow delete: if false; // Disallow deleting profiles
    }

    // SERVICE REQUESTS: /serviceRequests/{requestId}
    match /serviceRequests/{requestId} {
      allow read: if request.auth != null; // Any logged-in user can browse jobs
      allow create: if request.auth.uid == request.resource.data.clientId; // Only the client can create it
      allow update: if request.auth.uid == resource.data.clientId // Client can update/cancel
                    || request.auth.uid == resource.data.assignedArtisanId; // Assigned artisan can update status
      allow delete: if false; // Use a 'cancelled' status instead
    }
    
    // PROPOSALS: /proposals/{proposalId}
    match /proposals/{proposalId} {
      // Client who owns the request and the artisan who owns the proposal can read it
      allow read: if request.auth.uid == resource.data.artisanId 
                   || get(/databases/$(database)/documents/serviceRequests/$(resource.data.serviceRequestId)).data.clientId == request.auth.uid;
      allow create: if request.auth.uid == request.resource.data.artisanId; // Only artisans can create proposals for themselves
      allow update: if get(/databases/$(database)/documents/serviceRequests/$(resource.data.serviceRequestId)).data.clientId == request.auth.uid; // Client can update status (accept/reject)
      allow delete: if request.auth.uid == resource.data.artisanId; // Artisan can withdraw their proposal
    }

    // CHATS & MESSAGES
    match /chats/{chatId} {
      // Only participants can read/write to a chat document and its subcollection
      allow read, write: if request.auth.uid in resource.data.participants;
      
      match /messages/{messageId} {
        allow read, write: if request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
      }
    }
    
    // ESCROW & PAYMENTS: Server-only access recommended
    // These rules assume creation/updates are handled by secure backend functions (e.g., Cloud Functions with Paystack webhooks)
    // and not directly by the client SDK.
    match /escrowTransactions/{transactionId} {
      // Only participants of the transaction can view it. Admin can view.
      allow read: if request.auth.uid == resource.data.clientId 
                   || request.auth.uid == resource.data.artisanId
                   || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      allow write: if false; // No direct client writes
    }
    
    // WITHDRAWAL ACCOUNTS: Artisan-only access
    match /withdrawalAccounts/{userId} {
      allow read, write: if request.auth.uid == userId; // Only the artisan can manage their own account details
    }
    
    // NOTIFICATIONS: Server-only creation, user-only read/update
    match /notifications/{notificationId} {
      allow read, update: if request.auth.uid == resource.data.userId; // User can read/update (mark as read) their own notifications
      allow create, delete: if false; // Created by server logic only
    }

    // DISPUTES: Admin and participant access
    match /disputes/{disputeId} {
        allow read: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
                     || request.auth.uid == resource.data.clientId
                     || request.auth.uid == resource.data.artisanId;
        allow create: if request.auth.uid == request.resource.data.clientId || request.auth.uid == request.resource.data.artisanId;
        allow update: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
        allow delete: if false;
    }
  }
}
