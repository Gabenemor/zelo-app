
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isArtisan() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'artisan';
    }

    function isClient() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'client';
    }

    // USERS collection
    match /users/{userId} {
      // Anyone can create a user document (part of registration)
      allow create: if request.auth.uid == userId;

      // Only the owner or an admin can read the full user document
      allow read: if isOwner(userId) || isAdmin();

      // Only the owner can update their own data. They cannot change their role.
      // Admins can update any user's data (e.g., for suspension).
      allow update: if (isOwner(userId) && request.resource.data.role == resource.data.role) 
                    || isAdmin();
    }

    // ARTISAN PROFILES collection
    match /artisanProfiles/{userId} {
      // Anyone can view an artisan's profile
      allow read: if true;

      // Allow an artisan to create their own profile document
      // if the corresponding user document has the role 'artisan'.
      allow create: if request.auth.uid == request.resource.data.userId
                    && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'artisan';

      // Artisan can update their own profile, but cannot change their userId. Admins can also update.
      allow update: if (isOwner(userId) && request.resource.data.userId == resource.data.userId) || isAdmin();
    }

    // CLIENT PROFILES collection
    match /clientProfiles/{userId} {
      // Authenticated users can read client profiles (e.g., artisan viewing client who posted job)
      allow read: if request.auth != null;

      // Allow a client to create their own profile document
      // if the corresponding user document has the role 'client'.
      allow create: if request.auth.uid == request.resource.data.userId
                    && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'client';

      // Client can update their own profile, but cannot change their userId. Admins can also update.
      allow update: if (isOwner(userId) && request.resource.data.userId == resource.data.userId) || isAdmin();
    }
    
    // SERVICE REQUESTS collection
    match /serviceRequests/{requestId} {
      // Anyone can read open service requests
      // Owner, assigned artisan, or admin can read requests in any state
      allow read: if resource.data.status == 'open' 
                  || isOwner(resource.data.clientId) 
                  || isOwner(resource.data.assignedArtisanId)
                  || isAdmin();

      // Only authenticated clients can create requests for themselves
      allow create: if isClient() && isOwner(request.resource.data.clientId);

      // Only the owner client can update their request if it's still open
      // The assigned artisan can update it (e.g., mark as complete)
      // Admins can update any request
      allow update: if (isOwner(resource.data.clientId) && resource.data.status == 'open')
                    || isOwner(resource.data.assignedArtisanId)
                    || isAdmin();
    }

    // PROPOSALS collection
    match /proposals/{proposalId} {
      // Only the artisan who made the proposal, the client who owns the request, or an admin can read it
      allow read: if isOwner(resource.data.artisanId) 
                  || isOwner(get(/databases/$(database)/documents/serviceRequests/$(resource.data.serviceRequestId)).data.clientId)
                  || isAdmin();

      // Only an authenticated artisan can create a proposal
      allow create: if isArtisan() && isOwner(request.resource.data.artisanId);

      // The artisan can update/withdraw their own proposal if it's pending.
      // The client can update it (to accept/reject it).
      allow update: if (isOwner(resource.data.artisanId) && resource.data.status == 'pending')
                    || isOwner(get(/databases/$(database)/documents/serviceRequests/$(resource.data.serviceRequestId)).data.clientId)
                    || isAdmin();
    }
    
    // CHATS collection and messages subcollection
    match /chats/{chatId} {
      // Users can only read/write chats they are a part of
      allow read, write: if request.auth.uid in resource.data.participants || isAdmin();

      // Rule for creating a new chat document
      allow create: if request.auth.uid in request.resource.data.participants && request.resource.data.participants.size() == 2;

      match /messages/{messageId} {
        // Participants can read/write messages in their own chat
        allow read, write: if request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants
                        || isAdmin();
      }
    }
    
    // NOTIFICATIONS collection
    match /notifications/{notificationId} {
      // Only the owner can read or modify their notifications
      allow read, write, delete: if isOwner(resource.data.userId) || isAdmin();

      // Allow backend services (or admins) to create notifications for a user
      allow create: if true; // Typically created by trusted server code
    }

    // ESCROW TRANSACTIONS collection
    match /escrowTransactions/{transactionId} {
      // Only participants (client, artisan) or an admin can read
      allow read: if isOwner(resource.data.clientId)
                  || isOwner(resource.data.artisanId)
                  || isAdmin();
                  
      // No one can update directly; updated via backend logic
      allow write: if false; // Should only be written/updated by secure backend
      allow create: if false; // Should only be created by secure backend
    }

    // WITHDRAWAL ACCOUNTS collection
    match /withdrawalAccounts/{userId} {
      // Only the owner or an admin can read/write withdrawal account details
      allow read, write: if isOwner(userId) || isAdmin();
    }

     // DISPUTES collection
    match /disputes/{disputeId} {
      // Participants or admin can read.
      allow read: if isOwner(get(/databases/$(database)/documents/serviceRequests/$(resource.data.serviceRequestId)).data.clientId)
                  || isOwner(get(/databases/$(database)/documents/serviceRequests/$(resource.data.serviceRequestId)).data.assignedArtisanId)
                  || isAdmin();

      // Only client or artisan on the job can create.
      allow create: if isOwner(request.resource.data.clientId) || isOwner(request.resource.data.artisanId);
      
      // Only admin can update.
      allow update: if isAdmin();
    }
  }
}
