
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    function isRole(role) {
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }

    function isArtisan() {
      return isRole('artisan');
    }

    function isClient() {
      return isRole('client');
    }

    function isAdmin() {
      return isRole('admin');
    }
    
    function isServiceRequestOwner(serviceRequestId) {
      return get(/databases/$(database)/documents/serviceRequests/$(serviceRequestId)).data.clientId == request.auth.uid;
    }

    // Users Collection
    // Anyone can create their own user document during registration.
    // Users can only update their own document. Admins can update any.
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) || isAdmin();
    }

    // Profiles (Artisan and Client)
    // Users can only manage their own profiles.
    match /{profileCollection}/{userId} where profileCollection in ['artisanProfiles', 'clientProfiles'] {
      allow read: if request.auth != null;
      // Allow creation if user is authenticated and is the owner.
      // This is crucial for the onboarding flow.
      allow create: if isOwner(userId);
      // Allow updates if user is owner or admin.
      allow update: if isOwner(userId) || isAdmin();
    }
    
    // Service Requests
    match /serviceRequests/{requestId} {
      allow read: if request.auth != null;
      // Only clients can create service requests.
      allow create: if isClient();
      // Only the client owner can update/cancel their own request.
      // The assigned artisan can also update status to 'completed'.
      // Admins can update anything.
      allow update: if (isClient() && resource.data.clientId == request.auth.uid) || 
                       (isArtisan() && resource.data.assignedArtisanId == request.auth.uid) || 
                       isAdmin();
    }

    // Proposals
    match /proposals/{proposalId} {
      allow read: if request.auth != null;
      // Only artisans can create proposals.
      allow create: if isArtisan();
      // An artisan can update their own proposal (e.g. to withdraw it).
      // A client can update a proposal that belongs to their service request (to accept/reject it).
      // Admins can moderate.
      allow update: if (isArtisan() && resource.data.artisanId == request.auth.uid) ||
                       (isClient() && isServiceRequestOwner(resource.data.serviceRequestId)) ||
                       isAdmin();
    }

    // Chat
    match /chats/{chatId} {
      allow read: if request.auth.uid in resource.data.participants || isAdmin();
      // Allow creation if the user is one of the participants in the new chat document.
      allow create: if request.auth.uid in request.resource.data.participants;
      // Allow updates (like lastMessage) only if the user is a participant.
      allow update: if request.auth.uid in resource.data.participants;
      // No direct deletes.
      allow delete: if false;

      match /messages/{messageId} {
         // Can read/create messages if you are a participant of the parent chat.
         allow read, create: if request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants || isAdmin();
         // Disallow updates/deletes for now to keep things simple.
         allow update, delete: if false;
      }
    }

    // Notifications: Assume these are created by server-side logic (e.g., Firebase Functions)
    // so clients should not be able to write directly. They can only read/update their own.
    match /notifications/{notificationId} {
      allow read, update, delete: if isOwner(resource.data.userId);
      allow create: if false; // Deny client-side creation
    }

    // Escrow Transactions: Similar to notifications, should be managed server-side.
    match /escrowTransactions/{transactionId} {
      allow read: if resource.data.clientId == request.auth.uid || resource.data.artisanId == request.auth.uid || isAdmin();
      allow create, update, delete: if false; // Deny client-side modifications
    }
    
    // Withdrawal Accounts: Only artisans can create/update their own.
    match /withdrawalAccounts/{userId} {
      allow read, write: if isArtisan() && isOwner(userId);
    }
    
    // Disputes: Assume these are managed server-side.
    match /disputes/{disputeId} {
      allow read: if isAdmin(); // Only admins can read all disputes for now
      allow create, update, delete: if false; // Managed by server/admin actions
    }
  }
}
