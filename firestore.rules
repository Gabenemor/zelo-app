
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      // Check for custom claim `admin: true`
      return request.auth.token.admin == true;
    }
    
    function isArtisan() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'artisan';
    }
    
    function isClient() {
       return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'client';
    }

    // User collection: Users can read their own data and admins can read any.
    // Users can create their own doc on signup.
    // Users can only update their own doc, and cannot change their role or emailVerified status.
    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow create: if isOwner(userId); // Allows user to be created during signup
      allow update: if isOwner(userId) 
                    && request.resource.data.role == resource.data.role
                    && request.resource.data.emailVerified == resource.data.emailVerified
                    && request.resource.data.createdAt == resource.data.createdAt;
    }

    // Profile collections: Simplified rules for now.
    // Users can write to their own profile.
    match /clientProfiles/{userId} {
      allow read: if true; // Publicly readable for now, can be tightened
      allow write: if isOwner(userId); // Simplified to allow users to update their own profile.
    }
    match /artisanProfiles/{userId} {
      allow read: if true;
      allow write: if isOwner(userId); // Simplified to allow users to update their own profile.
    }

    // Service Requests:
    // Clients can create.
    // Anyone authenticated can read.
    // Owner can update if status is 'open' or 'cancelled'.
    // Admins can update any.
    match /serviceRequests/{requestId} {
      allow read: if isAuthenticated();
      allow create: if isClient() && request.resource.data.clientId == request.auth.uid;
      allow update: if isAdmin() || 
                     (isOwner(resource.data.clientId) && (resource.data.status == 'open' || resource.data.status == 'cancelled' || resource.data.status == 'awarded'));
    }

    // Proposals:
    // Artisans can create.
    // Involved parties (client of request, artisan who proposed) and admins can read.
    // Artisan can update their own proposal if it's 'pending'.
    match /proposals/{proposalId} {
      allow read: if isAdmin() || 
                   isOwner(resource.data.artisanId) || 
                   isOwner(get(/databases/$(database)/documents/serviceRequests/$(resource.data.serviceRequestId)).data.clientId);
      allow create: if isArtisan() && request.resource.data.artisanId == request.auth.uid;
      allow update: if isOwner(resource.data.artisanId) && resource.data.status == 'pending';
    }
    
    // Chats and Messages:
    // Users can only access chats they are a participant in.
    match /chats/{chatId} {
      allow read, write: if request.auth.uid in resource.data.participants;
      
      // Messages subcollection
      match /messages/{messageId} {
        allow read, write: if request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
      }
    }
    
    // Notifications: Users can only read/write their own.
    match /notifications/{notificationId} {
      allow read, write: if isOwner(resource.data.userId);
    }

    // Escrow and Withdrawal: Highly restricted
    match /escrowTransactions/{transactionId} {
      allow read: if isAdmin() || 
                   isOwner(resource.data.clientId) || 
                   isOwner(resource.data.artisanId);
      allow create: if isClient() || isAdmin(); // Can be created by clients (funding) or admin
      allow update: if isAdmin(); // Only admins can update transaction status directly
    }

    match /withdrawalAccounts/{userId} {
      allow read, write: if isOwner(userId);
    }
    
    // Disputes: Read by involved parties and admin. Create by client/artisan. Update by admin.
    match /disputes/{disputeId} {
      allow read: if isAdmin() || isOwner(resource.data.clientId) || isOwner(resource.data.artisanId);
      allow create: if isClient() || isArtisan();
      allow update: if isAdmin();
    }
  }
}
