rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions to make rules more readable
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function getUserData(userId) {
        return get(/databases/$(database)/documents/users/$(userId)).data;
    }
    
    function getUserRole(userId) {
      return getUserData(userId).role;
    }

    function isAdmin() {
      return isSignedIn() && getUserRole(request.auth.uid) == 'admin';
    }

    // == Collections Security ==

    // USERS Collection
    // - Users can create their own user document on signup.
    // - Users can read and update their own data.
    // - Users cannot change their own role.
    // - Admins can read and delete user data.
    match /users/{userId} {
      allow read, update: if isOwner(userId) || isAdmin();
      allow create: if isOwner(userId);
      allow delete: if isAdmin();
      
      // Prevent role escalation
      allow update: if request.resource.data.role == resource.data.role;
    }

    // PROFILES (Artisan & Client)
    // - Anyone can read artisan profiles to browse services.
    // - Only signed-in users can read client profiles.
    // - Only the owner or an admin can create or update a profile.
    match /artisanProfiles/{userId} {
      allow read: if true;
      allow create, update: if isOwner(userId) || isAdmin();
    }

    match /clientProfiles/{userId} {
      allow read: if isSignedIn();
      allow create, update: if isOwner(userId) || isAdmin();
    }
    
    // WITHDRAWAL ACCOUNTS
    // - These are highly sensitive. Only the owner artisan or an admin can access them.
    match /withdrawalAccounts/{userId} {
      allow read, create, update, delete: if isOwner(userId) || isAdmin();
    }

    // SERVICE REQUESTS
    // - Anyone signed in can read service requests.
    // - Only clients can create requests for themselves.
    // - Only the owner client or an admin can update a request.
    match /serviceRequests/{requestId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && getUserRole(request.auth.uid) == 'client' && request.auth.uid == request.resource.data.clientId;
      allow update: if isOwner(resource.data.clientId) || isAdmin();
      allow delete: if isAdmin();
    }

    // PROPOSALS
    // - Only artisans can create proposals for themselves.
    // - The client who posted the request, the artisan who made the proposal, or an admin can read it.
    // - The client or an admin can update the proposal (to accept/reject it).
    match /proposals/{proposalId} {
      allow create: if isSignedIn() && getUserRole(request.auth.uid) == 'artisan' && request.auth.uid == request.resource.data.artisanId;
      
      function isRequestClient() {
          let serviceRequest = get(/databases/$(database)/documents/serviceRequests/$(request.resource.data.serviceRequestId));
          return serviceRequest.data.clientId == request.auth.uid;
      }
      allow read, update: if (isOwner(resource.data.artisanId)) || isRequestClient() || isAdmin();
    }

    // CHATS & MESSAGES
    // - Only participants of a chat can read or write to it.
    match /chats/{chatId} {
      allow read, update: if isSignedIn() && request.auth.uid in resource.data.participants;
      
      match /messages/{messageId} {
        allow read, create: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
        allow update, delete: if false; // Messages are immutable
      }
    }
    
    // ESCROW TRANSACTIONS & NOTIFICATIONS
    // - Critical data that should only be written by a trusted server environment.
    // - Clients and Artisans involved in the transaction can read them, as can admins.
    match /escrowTransactions/{transactionId} {
       allow read: if isSignedIn() && (request.auth.uid == resource.data.clientId || request.auth.uid == resource.data.artisanId || isAdmin());
       allow create, update, delete: if false; // Server-side only
    }
    
    match /notifications/{notificationId} {
      allow read, update, delete: if isOwner(resource.data.userId);
      allow create: if false; // Server-side only
    }
    
    // DISPUTES
    // - Only participants or admins can read.
    // - Participants can create disputes.
    // - Only admins can update (resolve) disputes.
    match /disputes/{disputeId} {
       allow read: if isSignedIn() && (request.auth.uid == resource.data.clientId || request.auth.uid == resource.data.artisanId || isAdmin());
       allow create: if isSignedIn() && (request.auth.uid == request.resource.data.clientId || request.auth.uid == request.resource.data.artisanId);
       allow update: if isAdmin();
    }
  }
}
